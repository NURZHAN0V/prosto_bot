import logging
import os
from datetime import datetime
from typing import Optional

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters, 
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class GreetingBot:
    """–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏"""
    
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("greet", self.greet_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        current_time = datetime.now().strftime("%H:%M")
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="greet"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ],
            [
                InlineKeyboardButton("üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", callback_data="morning"),
                InlineKeyboardButton("üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", callback_data="evening")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!*

–Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π! ü§ñ

üïê –°–µ–π—á–∞—Å: {current_time}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ—ë –∏–º—è, –∏ —è –ø–æ–∑–¥–æ—Ä–æ–≤–∞—é—Å—å —Å –≤–∞–º–∏! ‚ú®
        """.strip()
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/greet [–∏–º—è] - –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º

üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –≤ —á–∞—Ç
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /greet —Å –∏–º–µ–Ω–µ–º
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é

üé® *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
‚Ä¢ –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        """.strip()
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def greet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /greet"""
        if context.args:
            name = " ".join(context.args)
            await self._send_greeting(update, context, name)
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ü—Ä–∏–º–µ—Ä: /greet –ò–≤–∞–Ω"
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.strip()
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
        if text and len(text) <= 50 and text.replace(' ', '').isalpha():
            await self._send_greeting(update, context, text)
        else:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ—ë –∏–º—è, –∏ —è –ø–æ–∑–¥–æ—Ä–æ–≤–∞—é—Å—å —Å –≤–∞–º–∏! ‚ú®"
            )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        current_time = datetime.now().hour
        
        if query.data == "greet":
            await self._send_greeting(update, context, user.first_name)
        elif query.data == "help":
            await self.help_command(update, context)
        elif query.data == "morning":
            greeting = self._get_time_based_greeting(current_time, "—É—Ç—Ä–æ")
            await query.edit_message_text(
                f"{greeting}, {user.first_name}! üåÖ\n\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ú®",
                parse_mode='Markdown'
            )
        elif query.data == "evening":
            greeting = self._get_time_based_greeting(current_time, "–≤–µ—á–µ—Ä")
            await query.edit_message_text(
                f"{greeting}, {user.first_name}! üåÜ\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞! ‚ú®",
                parse_mode='Markdown'
            )
    
    async def _send_greeting(self, update: Update, context: ContextTypes.DEFAULT_TYPE, name: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∏–º–µ–Ω–µ–º"""
        current_time = datetime.now().hour
        greeting = self._get_time_based_greeting(current_time)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting_text = f"""
{greeting}, *{name}*! ‚ú®

üéâ –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!
üïê –í—Ä–µ–º—è: {datetime.now().strftime("%H:%M")}
üìÖ –î–∞—Ç–∞: {datetime.now().strftime("%d.%m.%Y")}

–ñ–µ–ª–∞—é –≤–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è! üåü
        """.strip()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ï—â—ë —Ä–∞–∑", callback_data="greet"),
                InlineKeyboardButton("üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ", callback_data="morning")
            ],
            [
                InlineKeyboardButton("üåÜ –í–µ—á–µ—Ä–Ω–µ–µ", callback_data="evening"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                greeting_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                greeting_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    
    def _get_time_based_greeting(self, hour: int, time_type: Optional[str] = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
        if time_type == "—É—Ç—Ä–æ":
            return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        elif time_type == "–≤–µ—á–µ—Ä":
            return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        
        if 5 <= hour < 12:
            return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        elif 12 <= hour < 17:
            return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        elif 17 <= hour < 23:
            return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        else:
            return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("ü§ñ Telegram Greeting Bot")
        print("=" * 30)
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print()
        print("üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram")
        print("2. –ù–∞–π–¥–∏—Ç–µ @BotFather")
        print("3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
        print("4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
        print("5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
        print()
        print("üîß –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        print()
        print("üí° –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:")
        
        token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ").strip()
        
        if not token or token == "your_bot_token_here":
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤–≤–µ–¥–µ–Ω. –ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω.")
            return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot = GreetingBot(token)
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        bot.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")

if __name__ == '__main__':
    main()
